# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WOvur90ZYO8-67KHrKceT3ALQhePVlKv
"""

# Interpolacion polinomica de Newton // diferencias divididas


fx = lambda x : x**2  # funcion a interpolar
xo = [];n = 5
fo = []
for i in range(1,n+1):
  xo.append(i)      #valores en x
  fo.append(fx(i) ) #funcion

print(fo)

# print(len(fo)) es 5
# primer orden coef a0
f1 = [] ; correccion = 0.0000001
for i in range(0,len(fo)):
  if i == len(fo)-1:
    break
    #M1 = ((fo[i]+correccion) ) / ( xo[i]+ correccion)
  else:
    M1 = fo[i + 1] - fo[i] / ( xo[i + 1] - xo[i])
  f1.append(M1)

a0 = f1[0]  # armar lista de coeficientes 
#print(f1)

#______________________________________________________________________
# segundo orden a1 

f1.append(0) ; print(f1)  # agregar un termino mas a la lista para simetria 

f2 = []
for i in range(0,len(fo)):
  if i == len(fo)-2:   # se toma como -2 pq se anadio un cero por eso de la simetria
    break
  else : 
    num = f1[i + 1] - f1[i] # resto los coeficientes previos de f1 多sera iterativo?
    #print('num',num)
    if i < len(fo)/2:
      den = xo[i+2] -  xo[i]               # recorrer de forma intercalada el arreglo de x
    f2.append(num/den)

print(f2)
a1 = f2[0]

#______________________________________________________________________
# tercer orden orden a2

f2.append(0) ; #print(f2)  # agregar un termino mas a la lista para simetria 

f3 = []
for i in range(0,len(f1)):
  if i == len(fo)-3:   # se toma como -2 pq se anadio un cero por eso de la simetria
    break
  else : 
    num = f2[i + 1] - f2[i] # resto los coeficientes previos de f1 多sera iterativo?
    #print('num',num)
    if i < len(fo)/2:
      den = xo[i+3] -  xo[i]               # recorrer de forma intercalada el arreglo de x
    f3.append(num/den)

print(f2)
a2 = f3[0] 

#_______________________________________________________________________________
# construir el polinomio
import numpy as np
import matplotlib.pyplot as plt
 
fX = lambda x : x**2
X = np.linspace(-5,5,num=100)
coefs = [a0,a1,a2]
fx = []
for x in range(len(X)):
  fx.append(a0 + a1*(x-xo[0]) + a2*(x-xo[0])*(x-xo[1]))
  y = fX(x)

plt.plot(X,fx)
plt.plot(xo,fo)
plt.grid()
plt.show()

# https://es.wikipedia.org/wiki/Interpolaci%C3%B3n_polin%C3%B3mica_de_Newton
# https://www.educative.io/blog/python-lambda-functions-tutorial

# Interpolacion polinomica de Newton // diferencias divididas  simplificar el metodo interior


fx = lambda x : x**2  # funcion a interpolar
xo = [];n = 5
fo = []
for i in range(1,n+1):
  xo.append(i)      #valores en x
  fo.append(fx(i) ) #funcion

jul = 0

while i < n:
  fimasuno = []    #va a ser el auxiliar
  for i in range(0,len(fo)):
    if i == len(fo)-(jul+1):
      break
       
    else:
      M1 = fo[i + 1] - fo[i] / ( xo[i + 1] - xo[i])
    f1.append(M1)

ai = fimasuno[0] 
  



#______________________________________________________________________
# segundo orden a1 

f1.append(0) ; print(f1)  # agregar un termino mas a la lista para simetria 

f2 = []
for i in range(0,len(fo)):
  if i == len(fo)-2:   # se toma como -2 pq se anadio un cero por eso de la simetria
    break
  else : 
    num = f1[i + 1] - f1[i] # resto los coeficientes previos de f1 多sera iterativo?
    #print('num',num)
    if i < len(fo)/2:
      den = xo[i+2] -  xo[i]               # recorrer de forma intercalada el arreglo de x
    f2.append(num/den)

print(f2)
a1 = f2[0]

#______________________________________________________________________
# tercer orden orden a2

f2.append(0) ; #print(f2)  # agregar un termino mas a la lista para simetria 

f3 = []
for i in range(0,len(f1)):
  if i == len(fo)-3:   # se toma como -2 pq se anadio un cero por eso de la simetria
    break
  else : 
    num = f2[i + 1] - f2[i] # resto los coeficientes previos de f1 多sera iterativo?
    #print('num',num)
    if i < len(fo)/2:
      den = xo[i+3] -  xo[i]               # recorrer de forma intercalada el arreglo de x
    f3.append(num/den)

print(f2)
a2 = f3[0] 

#_______________________________________________________________________________
# construir el polinomio
import numpy as np
import matplotlib.pyplot as plt
 
fX = lambda x : x**2
X = np.linspace(-5,5,num=100)
coefs = [a0,a1,a2]
fx = []
for x in range(len(X)):
  fx.append(a0 + a1*(x-xo[0]) + a2*(x-xo[0])*(x-xo[1]))
  y = fX(x)

plt.plot(X,fx)
plt.plot(xo,fo)
plt.grid()
plt.show()