# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lSJDACaAglqf5wT8HIkkAax2rAcsOb9K
"""

# error absoluto y error relativo 



def errorAbsoluto(p ,prima): # impresicion o sensibilidad
  return abs(p - prima)

def errorRelativo(p,prima): # toma en cuenta el tama√±o  del valor es relativo a ... el valor que se tomo como exacto
  return abs(p - prima)/abs(p)

p = 0.300*10**(-3)     # el valor que s etoma como exacto o la media arimetica de varias mediciones
pPrima = 0.310*10**(-3)  # valor aproximado 
a = errorRelativo(p,pPrima) ; print(a)
a = a * 100 ; print(a)

#https://medium.com/techtofreedom/5-uses-of-lambda-functions-in-python-97c7c1a87244
# https://johnathaningle.com/simple-derivatives-in-python/
# https://www.geeksforgeeks.org/python-program-to-compute-a-polynomial-equation/

# polinomio de taylor 

import matplotlib.pyplot as plt
from sympy import *
import math

#x = 2 #x = sp.Symbol('x')

f = lambda x: math.cos(x)


xo = 1    
fInicial = f(xo)   
h = 0.001  ; fprime = ( f(xo+h)-f(xo) )/ h   # termino h de la derivada   
N = 4  # grado polinomio

for k in range(1,N+1):
  fPrime = lambda x : diff(f,x)
  fP = fPrime(xo)
  firstTerm = fprime / (math.factorial(k))
  secondTerm = pow(x -xo, k)  #(x - xo)**k

  f = fprime

a = range(1,5) ; print(a  )

